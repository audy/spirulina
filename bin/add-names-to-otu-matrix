#!/usr/bin/env python

import argparse
import logging
from collections import defaultdict

def parse_args():

    parser = argparse.ArgumentParser()

    parser.add_argument('--otu-matrix', default='/dev/stdin')
    parser.add_argument('--rank', required=True)
    parser.add_argument('--taxonomies', required=True)
    parser.add_argument('--output', default='/dev/stdout')
    parser.add_argument('--missing', type=str, default='unclassified_reads')

    return parser.parse_args()

def csv_to_dict(h, dtype=str):

    csv_dict = {}

    columns = h.next().strip().replace('"', '').split(',')[1:]
    for row in h:
        row = row.strip().replace('"', '').split(',')
        index = row[0]
        values = row[1:]
        csv_dict[index] = {}
        for k, v in zip(columns, values):
            csv_dict[index][k] = dtype(v)
    return csv_dict


def dict_to_csv(dict, out_file):
    # get all keys
    all_otus = set()
    for k, v in dict.items():
        for kk, vv in v.items():
            all_otus.add(kk)

    all_otus = sorted(list(all_otus))
    with open(out_file, 'w') as out:
        out.write(','.join(all_otus))
        out.write('\n')
        for index, v in dict.items():
            out.write('%s' % index)
            for otu_id in all_otus:
                out.write(',%s' % dict[index][otu_id])
            out.write('\n')



def read_csv(filename, dtype=str):
    with open(filename) as handle:
        data = csv_to_dict(handle, dtype=dtype)
    return data


def main():

    args = parse_args()

    # [row][column] = count
    updated_counts = defaultdict(lambda: defaultdict(int))

    logging.basicConfig(level=logging.DEBUG)

    logging.info('loading taxonomic descriptions from %s' % args.taxonomies)

    taxonomies = read_csv(args.taxonomies)

    logging.info('reading from %s' % args.otu_matrix)

    otu_matrix = read_csv(args.otu_matrix, dtype=int)
    logging.info('read %s rows' % len(otu_matrix.keys()))

    logging.info('combining and merging')
    new_counts = defaultdict(lambda: defaultdict(lambda: 0))
    for index, counts in otu_matrix.items():
        for otu_id, n_reads in counts.items():
            new_id = taxonomies.get(otu_id, { args.rank: otu_id }).get(args.rank, args.missing)
            new_counts[index][new_id] += n_reads

    dict_to_csv(new_counts, args.output)


if __name__ == '__main__':
    main()
