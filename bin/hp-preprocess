#!/usr/bin/env python

import os

from glob import glob
from itertools import groupby

from sys import argv


class ExperimentRunner:

    def __init__(self, **kwargs):

        self.base_dir = kwargs['base_dir']
        self.barcodes = kwargs['barcodes']
        self.base_cmd = kwargs['base_cmd']
        self.qual_type = kwargs['qual_type']
        self.qsub_file = kwargs['qsub_file']
        self.chunk_size = kwargs['chunk_size']

        self.experiments = self._find_experiments()

        self.base_settings = {
                    'barcodes': self.barcodes,
                    'qual_type': self.qual_type,
                    'qsub_file': self.qsub_file,
                    'chunk_size': self.chunk_size
                  }

        self.commands = {
                'list': self.list_experiments
                }


    def _find_experiments(self):

        file_list = glob('%s/*.fastq.gz' % self.base_dir)

        experiments = {}

        for i, j in groupby(file_list, lambda k: '_'.join(os.path.basename(k).split('_')[0:3])):
            name = i
            files = sorted(list(j))
            left, barcode, right = files
            files = map(os.path.abspath, files)

            assert len(files) == 3

            experiments[name] =  {
                    'left_reads': files[0],
                    'bc_reads': files[1],
                    'right_reads': files[2],
                    'experiment': name.replace('_', '.'), # QIIME don't like underscores in sample names but periods are okay
                    'barcodes': self.barcodes
                    }

        assert 3*len(experiments) == len(file_list)

        return experiments


    def list_experiments(self):
        print 'Experiments:'
        for name in sorted(self.experiments):
            files = self.experiments[name]
            print '- %s' % name

    def run_experiment(self, experiment, **kwargs):
        print 'Running experiment %s' % experiment
        print

        self.base_settings.update(self.experiments[experiment])

        cmd = self.base_cmd % self.base_settings

        print 'Your command:'
        print cmd
        if kwargs['run'] == True:
             os.system(cmd)


def parse_args():
    if len(argv) == 1:
        return ('ls', [])
    else:
        return (argv[1], argv[2:])


def main():
    cmd, args = parse_args()

    barcodes = os.environ.get('BARCODES', '/scratch/lfs/adavisr/triplett-barcodes.csv')
    base_dir = os.environ.get('BASE_DIR', '/scratch/lfs/adavisr/hiseq-runs')
    qsub_file = os.environ.get('QSUB_FILE', '/home/adavisr/Code/hiseq-16s-pipeline/qsubs/hiseq-preprocess.sh')
    qual_type = os.environ.get('QUAL_TYPE', 'sanger')
    chunk_size = os.environ.get('CHUNK_SIZE', 1000000)

    run = 'RUN' in os.environ

    BASE_CMD = '''
    qsub \\
            -N %(experiment)s \\
            -v CHUNK_SIZE=%(chunk_size)s,LEFT_READS=%(left_reads)s,RIGHT_READS=%(right_reads)s,BC_READS=%(bc_reads)s,BARCODES=%(barcodes)s,EXPERIMENT=%(experiment)s,QUAL_TYPE=%(qual_type)s %(qsub_file)s
    '''

    runner = ExperimentRunner(base_dir=base_dir,
                              barcodes=barcodes,
                              qsub_file=qsub_file,
                              qual_type=qual_type,
                              chunk_size=chunk_size,
                              base_cmd=BASE_CMD)

    if cmd in ['ls', 'list']:
        runner.list_experiments()
    elif cmd in ['run']:
        runner.run_experiment(args[0], run=run)



if __name__ == '__main__':
    main()
